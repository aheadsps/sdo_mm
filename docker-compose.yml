services:
  django:
    restart: always
    build:
      context: .
      dockerfile: ./backend/docker/django/Dockerfile
    volumes:
      - ./backend/:/app
    command: /start
    ports:
      - 8080:8000
    env_file:
      - ./backend/.env
    networks:
      - backend
    depends_on:
      - db

  db:
    restart: always
    image: postgres:16.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    hostname: db
    networks:
      - backend
    env_file:
      - ./backend/.env

  react:
    container_name: react
    build:
      context: .
      dockerfile: ./frontend/docker/react/Dockerfile
    volumes:
      - '/app/node_modules'
      - './frontend:/app'
    ports:
      - 5173:5173
    command: ash -x /app/start
    stdin_open: true
    tty: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - backend

  rabbitmq:
    image: 'rabbitmq:3.11-management'
    container_name: 'rabbitmq'
    restart: unless-stopped
    volumes:
      - ./backend/docker/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./backend/docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    ports:
      - 5672:5672 # AMQP protocol port
      - 15672:15672 # HTTP management UI
    networks:
      - backend

  celery_worker:
    build:
      context: .
      dockerfile: ./backend/docker/django/Dockerfile
    command: /start
    volumes:
      - ./backend/:/app
    env_file:
      - backend/.env
    networks:
      - backend
    depends_on:
      - rabbitmq
      - db
      #- fast_api

  celery_beat:
    build:
      context: .
      dockerfile: ./backend/docker/django/Dockerfile
    command: /start
    volumes:
      - ./backend/:/app
    env_file:
      - backend/.env
    networks:
      - backend
    depends_on:
      - rabbitmq
      - db
      #- fast_api

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
